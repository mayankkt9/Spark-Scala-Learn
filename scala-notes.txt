Content - 
1) Scala Language Doc link
2) Some Features of Scala Programming
3) Types of Functions
	- Pure Functions
	- Impure Functions
	- First Class Functions
	- Higher Order Functions
	- Anonymous Functions
4) Benefit of passing around functions and its advantages
5) Two types of Variable in Scala
6) Advantages of Immutability
7) Tail recursion
8) Functional Statement
9) Strict and Lazy Evaluation
10) Pattern Matching
11) Closure
12) Functional vs OOP
13) Scala Type hierarchy
14) Scala Operators or call it Methods
15) Scala Functions and Optional Syntax
16) Function Literal
17) Place Holder Syntax
18) Local Function
19) Higher Order Function & Function Currying
20) Variable length Arguement and Named Arguement
21) Partially Applied Function
22) Function Currying 
23) Scala Control Abstraction
24) Higher Order abstraction 
	- foreach
	- map
	- filter
	- withFilter

25) Scala Object Oriented Programming
	- Constructor
	- Scala Objects
	- Apply Method



Scala Language Doc link  - https://www.scala-lang.org/api/2.13.2/

Some Features of Scala Programming 
	- Supports both Functional Programming and Object Oriented Programming
	- Immutable Object (Object whose state cant change)
	- Referential Transparency (function replaced by its result)
Functional Programming is way of writing software application using only pure functions and 
immutable values.
Library design and data crunching problems (Read later)

Types of Functions
	- Pure Functions
	- Impure Functions
	- First Class Functions
	- Higher Order Functions
	- Anonymous Functions


 What functions are pure functions (Should statisfy all three approach)
 	- Input solely determines the output (There are no other global variable or any other 
 		input other than parameter that determines the output)
 	- The function doesnt change the input (Doesnt have pass by value or reference feature)
 	- The function doesnt do anything else except computing the output. 
 	(Doesnt change global variable state or do anything else)

If any function uses some global variable for calculation or changes global variable, 
this is an example of side effects in functions.
Pure functions are functions that doesnot have side effects.

How can we test if the function is the pure function 
	- Just test it for the referential Transparency.
	- That is replace the function references with the output value.

Why Pure Functions 
	- Encourages safe way of programming (No Surprises)
	- Composable or Modular (Function composition easy for pure functions)
	- Easy to test
	- Memoizable (Caching of deterministic functions) (Cache the results, compilers can also do that)
	- Can be lazy


First Class Function
	- All functions in Scala are First class functions
	- First Class Function follow these rules 
		- You can assign it to a variable 
		- You can pass it as an arguement to the other functions
		- You can return it as a value from other functions.

Higher Order functions
	- In Scala you can create higher order functions
	- Example map inbuilt functions in scala is a higher order function
	- Atlease one of these rules you should follow for higher order functions
		- Takes one or more functions as arguement
		- Return a function as its result

Anonymous Functions 
	- One time function

Example 

def getOps(c:Int) = (i:Int) => {
	val doubler = (x:Int) => {x*2}
	val tripler = (x:Int) => {x*3}
	if(c>0) doubler(i)
	else	tripler(i)
}

Instead for Clean Code you can do

def getOps(c:Int) = (i:Int) => {
	if(c>0) {i*2}
	else	{i*3}
}

val r = 1 to 10
r.map(getOps(-1))
r.map(getOps(1))

Benfit of Anonymous Functions
	- Instead of defining the whole function we can just write the body
	- More convinient to write and easy to use.
Signature and body of the code is function literal

Benefit of passing around functions
	- Abstraction is the main benefit of higher order function
	- Abstraction makes the program easily extendable
	- You communicate the behaviour and less the implementation
	- Abstracted the implementation detail under higher order function (Example shown down)
		- More Precise
		- East to Understand
		- More Reuse
Example 
Problem Statement - Remind all customer for payment
Imperative approach
for(Customer cust : CustList){
	remind(cust);
}
Functional Programming Higher order function (hereforEach is an higher order function)
forEach(customer,remindPayment)
forEach(vendors,remindPayment)


Two types of Variable in Scala 
	- val (you cant change it)
	- var (You can change it)
Functional programming recommends you using val

Advantages of Immutability
	- Adopt Mathematical approach
	- Helps avoid various problems
		- immutable objects are more thread safe (Concurrent Programming)
		- data engineering 
	- Program without variable using recursions
		- Replace loops with recursion and avoid using vars.

We are not taking an oath to keep everything immutable
Mutability has its own advantages and we are free to choose what suites best for any problem
But for functional programming we should choose Immutability


Tail recursions

Yes, loops are better than recursion, because recursion takes lots of stack space.
Functional programming do involve lots of recursion so what is the solutions? 
Tail recursion is the solution
	- Function calling is what we do last in a function, such that no statement needs
	to be executed after that and so we dont have to come back after making each function call
	- Compiler will do the optimization internally
	- This optimization will overcome the performance and memory problem
def tailFact(n:Int,f:Int): Int={
	if(n<=0) return f
	else	return tailFact(n-1,n*f)
}

Functional Statement
	- Each statement returns a value
	- Even println returns a value
	- That is why some people say scala doesnt have statement it has expressions
	- It helps remove variable in our code, thus helping achieve Immutability
Example
def myResult(m:Int) = {
	if(m<=50) "passed"
	else	"failed"
}


Strict vs Lazy Evaluation

Strict - Evaluate the evaluation now
Lazy - Evalue it on the first use


Strict Evaluation
	- Variable Assignment
	- Functional parameter
	- Higher Order Functions

Variable Assignment
val s = fact(11)/fact(5)
This will be evaluated immediately and if we print s, fact function will not be called again
Just the assigned value would be printed.

Functional parameter
def functionCall(i:Int) = {
	println(i)
}
functionCall(fact(5)/fact(1))
Here first this value (fact(5)/fact(1)) will be calculated then it would be sent to function functionCall

Higher Order Function

def functionCall(f: => Int) = {
	f + f
}
functionCall(fact(5)/fact(1))
Here as we are sending the functions will be evaluated in this order that is two times each function
function fact(5) will be evaluated then
function fact(1) will be evaluated then
function fact(5) will be evaluated then
function fact(1) will be evaluated then
then the value of f + f will be returned i.e fact(5)/fact(1) + fact(5)/fact(1)

This is a performance issue, we can memoize this is functionCall function
def functionCall(f: => Int) = {
	println("Hello")
	val x = f
	x+x
}
fact functions will be evaluated first then Hello would be printed
Now each fact function fact(5) and fact(1) will be evaluated once.
But to note these were strict evaluation, where things were evaluated immediately

Strict Evaluation
	- Default evaluation in scala is strict
	- Scala evaluates function parameter before passing the value to a function. Hence they are evaluated only once.
		- Higher Order function are an exception that can be evaluated multiple times based on implementation
		- If you dont want multiple evaluation Cache it.

Lazy Evaluation (lazy keyword)

lazy val l = fact(5)/fact(2)
here fact will not be evaluated till the first use of l.
when we use l for the first time, these two fact functions will be evaluated.
If you use l from second time onwards, fact wont be evaluated further, instead value l assigned after first use will be used.


We can do the same lazy evaluation for Higher order function.
def functionCall(f: => Int) = {
	println("Hello")
	lazy val x = f
	x+x
}
functionCall(fact(5)/fact(1))
here first the function functionCall will be evaluated, when it sees the first f being used, then it calls fact function
Hello will be printed first and then fact will be called

Summary
	- Scala supports strict and lazy evaluation
	- default method is strict evaluation
	- You can even make a function lazy, by caching it to val.

Why Lazy ? 
	- To create Data Structure to handle large volumes of data efficiently
	- Apache Spark RDD they implement all operation lazy.

Example
Find first two error log in a file
val s = Source.fromFile("file.txt").getLines().toList.filter(_.contains("[error]")).take(2)

If your file is very large, you know this is not efficient because whole file would be traversed and converted to List
then each value int the list would be filtered and check for error contains and then you would take first two values.

Efficient Approch should be start from top as soon as you get two error logs stop.
val s = Source.fromFile("file.txt").getLines().toStream.filter(_.contains("[error]")).take(2)
When we create the stream it evaluated the first item, next item appears now as question mark meaning next item has not be evaluated till now.
Stream is a lazy data Structure and toStream is a lazy function, scala access the next line when it uses the next line.
s foreach println would give you the answer.


Pattern Matching
Matching object against object

There are many type of Pattern Matching one of them is 
	- Typed Pattern Matching (Object is of what type) (Very Basic Example)
Example
You have a requirement where you have to check whether two successive messages have same ID.

def testMessagePattern(l:List[Message]):String = {
   l match {
     case Nil => "Not found"
     case Message(EmailAddress(u1,d1),_) ::Message(EmailAddress(u2,d2),_) :: _ if(u1==u2) => u1 + " got two successive emails"
     case h::t => testMessagePattern(t)
   }
}
class Message(p_id:String, p_msg:String) {
  val id  = p_id;
  val msg = p_msg;
}
val messageList = List(
Message("tom@gmail.com","Message text 1"),
Message("7742394590","Message text 2"),
Message("8326192398","Message text 3"),
Message("lisa@gmail.com","Message text 4"),
Message("lisa@yahoo.com","Message text 5"),
Message("harry@gmail.com","Message text 6")
)
object EmailAddress {
  def apply(uname: String, dname: String) = uname + "@" + dname

  def unapply(str: String): Option[(String, String)] = {
      val parts = str split "@"
      if (parts.length == 2) Some(parts(0), parts(1)) else None
  }
}


Closure
	- Function
	- Pure or Impure
	- Named or Anonymous
	- uses one or more free variable in a function

Free variable are not part of the function arguement or defined locally
def getHike(salary:Double) = salary p/100
Here p is a free variable
Scala looks into the so-called nearest local lexical enviroment to find global variable p.
if p is defined locally then that p will be used otherwise you will get an error.
Closure takes the most recent state of the free variable.
Closure can be pure or impure based on var or val of free variable
If Closure changes free variable, changes persists outside closure


Functional vs OOP 
	- We create and pass function in FP
	- We create and pass objects in OOP
	- Objects are more flexible than function because they carry two elements methods and data elements.
	- So in FP how can we send data members and the methods, we can do that via Closure


Type System
	- If type checking done in compile time - Statically Typed (Scala)
	- If type checking done in run time - Dynamic Type (Python)
	- Statically Typed
		- Early Protection
		- Better Performance and optimization

Scala Type hierarchy
Any -> AnyVal,AnyRef
AnyVal -> Byte,Short,Int,Long,Float,Double,Char,Boolean,Unit
AnyRef -> List,Seq,Iterable,String

AnyVal -> Like primitives in Java but they are well defined classes in Scala
Scala Value classes dont need new keyword and are instantiated using literal
var x : Int = 123;
Unit is roughly like a void represented as empty parenthesis ().
Implicit conversion of data type follow here too.
There are many more AnyVal subclasses like RichInt,RichBoolean.. (additional functionality)

AnyRef -> All Class written in Scala are part of this hierarchy
You can use new keyword to instantiate new object


Null and Nothing hierarchy
Any Ref Class <- Null <- Nothing
Any Val Class <- Nothing

Assigning null and nothing are not allowed for value classes
Assigning null is allowed for reference classes
Scala has automatic type inference 
val i = 5 + 3
making code short and precise
But it is mandatory to give type to function parameter.
def fun(i:Int) = i + 4
Here it also infer it return type as Int.
But in some scenario it cant do that - Recursive function


Scala is a pure OOP language as every value in a language is an Object (Integer,Double)

Scala Operators or call it Methods
	- There are no operator in Scala
	- As all value are objects, each have function as their operator
	- Scala allows us to use the symbols as identifiers
	- Scala implements the arithmetic, logical, bitwise operators as methods
	- Every Method in scala is an operator (Important)
	- Scala allows Object Oriented Notation - Dot Notation as well as the opertor notation to call methods.
	- Four unary opertor in scala - +,-,~,!
Example

val i = 10
Calling via dot notation
i.*(5) gives 50 
i.compare(5) gives 5 
Calling via operator notation
i * 5 gives 50
i compare 5 gives 5

What if we have more than one input parameter ?
Ans - val r = 1 to (10,2)
Use Parenthesis

What if we have no parameter
Ans - println(-15 abs)


Scala Functions and Optional Syntax

def myMax(x:Int,y:Int) : Int = {
	if(x>y)
		return x;
	else
		return y;
}
Things to note as to what all things are required and what are optional
	- Semicolon is optional
	- Return keyword is optional
	- Curly braces on single line body is optional
	- Return type is optional
	- = is must otherwise it would behave as a Unit return type.
Would look like
def myMax(x:Int,y:Int) = if(x>y) x else y

If you keep the parenthesis while defining a function you can call it with and without parenthesis
But if you remove the parenthesis while defining a function you can only call it without parenthesis
Use parenthesis when the function has a side effect 
When function does not have side effect use without parenthesis
Becuase thats a function a parameterless function with a parenthesis indicates a side effect.


Function Literal 
	- It is just another way to define a function
	- you can assign a function literal to a value.
	- Used it through Higher Order Functions
		- Pass it to a higher order function
		- Return it from a higher order function
We can create values using a literal like this 
val s = "Hello World"
The same way we can create a function value using function literal
val f = (x:Int) => {x+5}
One more example 
Create a function that takes two parameter an Integer and a String, function return another string
by concatinating the string around the integer.
val f = (x:Int,s:String) => {s+x+s}
val f is the value
(x:Int,s:String) is the function type 
{s+x+s} is the function literal

So When do we use Function Literal 
	- Pass it to a higher order function 
customer.map((x:String)=>x.capitalize)
customer.map(x =>x.capitalize) 
because scala knows customer is a list of Strings and we can remove parenthesis if one arguement

Talking about function value 
val f = (x:Int) => x + 10
Scala generates a class for function literal and replaces the above code with
It instantiate the class as an object and assign it to a value here f.
So function value is an object whereas function literal is a source code or a class.
val f = new Function1[Int,Int]{
	def apply(x:Int):Int = x+10
}



Placeholder Syntax

Example 
Reduce method takes two parameter, successive values from list and does the operation
list.reduce((x:Int,y:Int)=>x+y)
list.map((x)=>(x+10))
If scala knows that reduce takes function as two parameter and for example map function takes function as one parameter 
why do we have to specify it again, we can use place holder syntax for this.

So we can write this as 
list.reduce(_+_) // First underscore represent first parameter and second underscore second parameter
list.map(_+10)

It wont work if there are more underscore than parameter
Example 
list.reduce ((x,y)=>x+y/x min y)
list.reduce(_+_/_ min _) // Compiler wont be able to know where to place x and y .


Local Function
	- Define function inside another function
	- Or Nested Function
def getErrors(fileName:String) = {
	def isError(line:String): {
		if(line.contains("error")) true else false
	}
}


Higher Order Function
	- Can take a function as an arguement
	- Can return a function

Taking function as arguement
intDecorate(5,(y:Int) => "[" + y + "]")
Defining this function
def intDecorate(x:Int, f:(Int)=>String) = {}

Returning a function from a function.
So requirement is 
val hiSomeone = greetSomeone("Hi")
hiSomeone("Mayank")
O/P -> Hi Mayank

def greetSomeone(prefix:String)= {
	(name:String) => println(prefix + " " + name)
}

Created a local Anonymous function as the last line.
Last line indicates it returned that anonymous function 
So to return a function from a higher order function just create a anonymous function in the last line 
We can also do this in an ordinary local function

def greetSomeone(prefix:String)= {
	def f2(name:String) => println(prefix + " " + name)
	f2 _
}
forecefully returning f2 in the last line 
underscore here is part of the partially applied function concept discussed later.

We can call this in a single step instead of assigning a value
greetSomeone("Hello")("Mayank")
O/p -> Hello Mayank
This is called function currying. Calling function in a series. 
One more example
val f1 = (x:Int) => (y:Int) => Math.sqrt(x+y)
f1(4)(12)
Ans = 4

This program becomes confusing when you add return type to it 
val f1: Int=>(Int=>Double) = (x:Int) => (y:Int) => Math.sqrt(x+y)
So remove everything from first colon to first equal to and try adding bracket to function body that would make it easy.


Variable length arguement
	- Repeating arguement must be the last arguement
	- All values must be of same data type
	- All values are packed into an array
Example
def echo(s:String*) = s foreach println

Named arguement
	- To make some parameters optional use the default valueto define them and use the named 
	argement to call them .
def doSomething(f:String =>Unit = println, s:String) = f(s)

So, during function defination, we specified default value for first argument above.
Now if we use doSomething function with just the second parameter it will work
doSomething(s="Hello");

Partial Applied Functions
	- To make generic functions
	- By Fixing some parameter

Division 
def div(x:Double,y:Double):Double = x/y
val inv = div(1,_:Double) // Instead of returning a double in this case it would return a whole new function
inv(10) gives you 0.1

Requirement 
	- 1+2+3+4+5
	- 1*1+2*2+3*3+4*4+5*5
	- 1*1*1+2*2*2+3*3*3+4*4*4+5*5*5
We can do this via Higher Order Function
def sumOfX(f:Int=>Int,a:Int,b:Int):Int = if(a>b) 0 else f(a) + sumOfX(f,a+1,b)
Now we can pass these accordingly
sumOfX(x=>x,1,5)
sumOfX(x=>x*x,1,5)
sumOfX(x=>x*x*x,1,5)

Doing this with Partially Applied Function
val sumOfCubes = sumOfX(x=>x*x*x,_:Int,_:Int)
sumOfCubes(1,5)

We can create one more function and make it generic
def applySums(f:(Int,Int)=>Int) => f(1,5)
applySums(sumOfCubes)
applySums(sumOfSquares)
applySums(sumOfSingleX)

Converting function defination to function value
def sum(x:Int,y:Int,z:Int) = x+y+z
val s3 = sum(_:Int,_:Int,_:Int)
Or short hand notation
val s3 = sum _


Function Currying
	- Nothing but a syntactic sugar
	- Allows you to split function parameter into multiple groups
	- Scala will internally generate series of function for each arguement group, Thats what we want in partially applied function

Example
Normally we do this way 
def sumOfX(f:Int=>Int,a:Int,b:Int):Int = if(a>b) 0 else f(a) + sumOfX(f,a+1,b)
sumOfX(x=>x*x,1,5)
val si = sumOfX(x=>x*x,_:Int,_:Int)

In function currying we group arguement
def sumOfX(f:Int=>Int)(a:Int,b:Int):Int = if(a>b) 0 else f(a) + sumOfX(f,a+1,b)
sumOfX(x=>x*x)(1,5)
val si = sumOfX(x=>x*x) _ // This notation became so simple
//If multi line 
val si = sumOfX {x=>x*x} _

Functional Programmer will try his best to remove variables inside functions

Scala Control Abstraction
	- if else
	- Match case
	- while loop and do while loop
	- Higher order control abstraction
	- for expression 
	- Own Loop Construct

Match Case 
	- break statements are optional
	- curly braces inside case statement are optional

Higher Order Control Abstraction
	- This capability allows you to abstract away the code clutter and make your final code precise, neat and easy to understand
	- If you are using any Spark libraries you would be noticing such abstraction more than often
	- If you are implementing a library in scala you will be implementing many of such abstractions

If you want to do this job repeatedly
	- Open file
	- read it line by line 
	- perform some operation on each line 
	- make sure file is closed at the end
You will 
withTextFile(fileLocation)map(doThisWork) 

Some Examples of Higher Order Abstraction in Scala 
	- foreach
		- l.foreach(f1)
		- Return type is Unit
		- basically says apply f1 to all elements of l
		- l.forEach(println)
	- map
		- l.map(f1)
		- Evereything same as forEach just the difference is it returns a value
		- Applies f1 to each value and returns the updated collection
	- flatMap
		- l.flatMap(f1) // f1=split(" ")
		- Specialized version of map
		- Takes the return value of f1 and breaks them again to get flattened list
	- filter
		- l.filter(x=>x.startsWith("i"))
		- takes a boolean function, apply it to all element and return only those element that statify boolean expression
	- withFilter
		- l.withFilter(x=>x.startsWith("i")).map(x=>x.capitalize)
		- filter returns you a new collection, withFilter doesnt, applies to subsequent calls
		- Efficient because it is lazy method and applies the boolean function when we use the element for the subsequent call

For expression
	- You must need a collection to iterate scala for loop
	- Scala doent have a for loop, its just a syntactic sugar 
	- Scal compiler converts the for loop to a combination of control abstraction (foreach,map,filter...)
	- for(seq){} -> behaves like foreach method -> return Unit
	- for(seq)yield{} -> behaves like map method -> returns new Collection
val n = 1 to 10
for (i <- n ) println(i)
for (i <- 1 to 10 ) println(i)
for (i <- 1 to 10 ) yield {i}
for (i <- n; j <- n ) println(i)

Requirement = from file get fields
for(line <- Source.fromFile("emp.txt").getLines().toList){
	val fields = line.split(",")
	println(fields(0)+"--"+fields(1)+"--"+fields(2)+"--"fields(10)+"--")
}
We can also do something like - keep all assignment and condition in parenthesis and keep body small

for{
	line <- Source.fromFile("emp.txt").getLines().toList
	fields = line.split(",")
	if(fields(10)=="60")
}println(fields(0)+"--"+fields(1)+"--"+fields(2)+"--"fields(10)+"--")



Scala Object Oriented Programming
	- Single Line Class | No need to write getter and setter
	- If you need some validation you may write java style classes and getter setter following method name convention
	- For all data member scala compiler creates reader and writer method by default
	- But if you want to change those method and write custom reader and writer you can do so.
	- Class comes with default constructor with no arguement
	- We can change constructor
		- Default Constructor
		- Primary constructor - class Circle(var radius:Int){} ->Give it while defining class, and define all data members here
		- Auxiliary constructor - for less arguments , it calls Primary constructor

for Auxiliary constructor
def this() = {this(1,1,1)}
def this(w:Int,h:Int) = {this(w,h,1)}

class Customer(var id:Int, var name:String)
val c = new Customer(101,"ABC")
c.id
c.name="XYZ" 


Scala Object (Singleton Object)
	- Different then java Object
	- Scala Object can have only one instance
	- object Name{}
	- you dont need to instantiate them to use methods
	- No one can instantiate it
	- object can extend or inherit classes but opposite is not allowed
	- Cannot have public constructor
	- Scala will instantiate the object on their first use, next time onwards it uses the same object.
	- We use this as a collection of static methods. Calling them via ObjectName.MethodName()
	- Singleton Pattern
	- Companion Object 
		- Extension of Singleton object
		- Same file containing one class and one object of same name 
		- Purpose 
			- Seperation of Concern 
				- Java allows you to create all non static and static fields in the same class
				- Scala seperate these concern keeps all non static fields in class and all static fields in object keep them togeather
				- Classes and object can access private methods of each other
			- Implementing Factory or Builder Pattern
				- Create different room types
				- val s = Room(STANDARD)
				- val d = Room(DELUXE)
				- val sd = Room(STD_DEL)

Apply Method
	- Both Scala and Object has inbuilt apply method
	- You can write custom apply method and return most used things from there
	- You just need object name or class name to call them
	- Scala libraries are full of apply methods
	- Example list(2) gives second element -> here you are actually calling the apply method
	- If we dont want to use new keyword to instantiate object we can write that in apply method of object
	- val list = List(1,2,3,4) -> this is calling apply method of object
	- list(1) -> this is calling apply method of class


Coursera Scala Course

Functions are First class citizen 
	- Functions can be defined anywhere, including inside other functions.
	- Functions can be passed as a parameter and return from a function
	- Exist set of operator to compose a function

Evaluation Stratergy 
	- Call by name - function arguement not evaluated if corresponding parameter is not used in body
	- Call by value - Evalute every function arguement only once 
In Scala we use call by value
	- Call by value is exponentially better than call by name
Can force Scala to do call by name by 
	- def func(x:Int, y: => Int)
	- by putting =>

